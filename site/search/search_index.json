{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"PicoCTF_2024/","title":"PicoCTF 2024","text":"<p>pico_CTF_writeup_2024_by_mravetchinfo</p> <p>Challenge Name: Bookmarklet</p> <p>Challenge Description:</p> <p>In this challenge, participants are provided with a webpage hosted at http://titan.picoctf.net:55173/ and are tasked with finding the flag. However, instead of manually searching for the flag within the webpage, the challenge suggests creating a bookmarklet to automate the process.</p> <p>Solution:</p> <p>To automate the flag retrieval process, we can use JavaScript to decrypt the encrypted flag provided on the webpage. Below is the JavaScript code used for decryption:</p> <pre><code>javascript:(function() {\n    var encryptedFlag = \"\u00e0\u00d2\u00c6\u00de\u00a6\u00c8\u00ac\u00eb\u00d9\u00a3\u00d6\u0096\u00d3\u00da\u00e5\u00db\u00d1\u00a2\u00d5\u00d3\u0097\u00d4\u009a\u00c5\u00d0\u009a\u00d9\u0096\u00ed\";\n    var key = \"picoctf\";\n    var decryptedFlag = \"\";\n    for (var i = 0; i &lt; encryptedFlag.length; i++) {\n        decryptedFlag += String.fromCharCode((encryptedFlag.charCodeAt(i) - key.charCodeAt(i % key.length) + 256) % 256);\n    }\n    alert(decryptedFlag);\n    // Flag: picoCTF{p@g3_turn3r_1d1ba7e0}\n})();\n</code></pre> <p>This JavaScript code decrypts the encrypted flag using a simple XOR cipher with a key of \"picoctf\". The decrypted flag is <code>picoCTF{p@g3_turn3r_1d1ba7e0}</code>.</p> <p>How to Use the Bookmarklet:</p> <ol> <li>Create a new bookmark in your web browser.</li> <li>Edit the bookmark's properties and give it a name, such as \"Decrypt Flag.\"</li> <li>Paste the JavaScript code provided above into the URL or Address field of the bookmark. Ensure that the code is preceded by <code>javascript:</code> to indicate that it is JavaScript code.</li> <li>Save the bookmark.</li> <li>Navigate to the provided webpage (http://titan.picoctf.net:55173/).</li> <li>Click on the bookmarklet created in step 2.</li> <li>An alert will pop up displaying the decrypted flag: <code>picoCTF{p@g3_turn3r_1d1ba7e0}</code>.</li> </ol> <p>Conclusion:</p> <p>Using a simple XOR cipher and a bookmarklet, we were able to automate the decryption of the flag provided on the webpage, making the flag retrieval process more efficient. Bookmarklets can be powerful tools in CTFs for automating tasks and solving challenges more quickly.</p> <p>References:</p> <ul> <li>PicoCTF</li> <li>CTF Writeup Guidelines</li> </ul> <p>CTF Writeup: Decoding Flags using Web Inspector</p> <p>Challenge Name: WebDecode Author: Nana Ama Atombo-Sackey</p> <p>Description: In the \"WebDecode\" challenge, participants are instructed to use the web inspector to find the flag. The challenge provides a webpage hosted at http://titan.picoctf.net:57534/. Upon inspecting the webpage, participants discover a section with an attribute <code>notify_true</code> containing encoded text: <code>&lt;section class=\"about\" notify_true=\"cGljb0NURnt3ZWJfc3VjYzNzc2Z1bGx5X2QzYzBkZWRfZGYwZGE3Mjd9\"&gt;</code>. The challenge hints at using tools like CyberChef to decode the flag.</p> <p>Decoded Flag: </p> <p>picoCTF{web_succ3ssfully_d3c0ded_df0da727}</p> <p>Conclusion: By inspecting the webpage and decoding the encoded text found in the HTML using CyberChef or similar tools, participants were able to successfully retrieve the flag. This challenge demonstrates the importance of understanding web technologies and utilizing web inspector tools in CTFs.</p> <p>References: </p> <ul> <li>PicoCTF - WebDecode Challenge</li> <li>CyberChef</li> </ul> <p>Challenge name - Unminify</p> <p>AUTHOR: JEFFERY JOHN</p> <p>Description I don't like scrolling down to read the code of my website, so I've squished it. As a bonus, my pages load faster! Browse here, and find the flag!</p> <p>http://titan.picoctf.net:51196/</p> <p>curl http://titan.picoctf.net:51196/ | grep -o 'picoCTF{[^}]*}' </p> <p>picoCTF{pr3tty_c0d3_622b2c88}</p> <p>Challenge name :IntroToBurp</p> <p>http://titan.picoctf.net:54461/</p> <p>picoCTF{#0TP_Bypvss_SuCc3$S_2e80f1fd}</p> <p>just intercept the form you get the /dashboard redirection</p> <p>then it will give the otp parametr jsut play with it I removed it lol got the flag</p> <p>Chall name - Super SSH AUTHOR: JEFFERY JOHN</p> <p>Description Using a Secure Shell (SSH) is going to be pretty important. Can you ssh as ctf-player to titan.picoctf.net at port 49566 to get the flag? You'll also need the password 1db87a14. If asked, accept the fingerprint with yes. If your device doesn't have a shell, you can use: https://webshell.picoctf.org If you're not sure what a shell is, check out our Primer: https://primer.picoctf.com/#_the_shell</p> <pre><code>ssh  ctf-player@titan.picoctf.net -p  49566\nThe authenticity of host '[titan.picoctf.net]:49566 ([3.139.174.234]:49566)' can't be established.\nED25519 key fingerprint is SHA256:4S9EbTSSRZm32I+cdM5TyzthpQryv5kudRP9PIKT7XQ.\nThis key is not known by any other names.\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nWarning: Permanently added '[titan.picoctf.net]:49566' (ED25519) to the list of known hosts.\nctf-player@titan.picoctf.net's password: \nWelcome ctf-player, here's your flag: picoCTF{s3cur3_c0nn3ct10n_45a48857}\nConnection to titan.picoctf.net closed.\n</code></pre> <p>Commitment Issues  |  | 50 points Tags:  AUTHOR: JEFFERY JOHN</p> <p>Description I accidentally wrote the flag down. Good thing I deleted it! You download the challenge files here: challenge.zip</p> <p>https://artifacts.picoctf.net/c_titan/138/challenge.zip</p> <p>picoCTF{s@n1t1z3_c785c319}</p> <pre><code>! \ue0b0 ~/p/g/drop-in \ue0b0 \ue0a0 ~ \ue0b0 git checkout b562f0b425907789d11d2fe2793e67592dc6be93\nNote: switching to 'b562f0b425907789d11d2fe2793e67592dc6be93'.\n\nYou are in 'detached HEAD' state. You can look around, make experimental\nchanges and commit them, and you can discard any commits you make in this\nstate without impacting any branches by switching back to a branch.\n\nIf you want to create a new branch to retain commits you create, you may\ndo so (now or later) by using -c with the switch command. Example:\n\n  git switch -c &lt;new-branch-name&gt;\n\nOr undo this operation with:\n\n  git switch -\n\nTurn off this advice by setting config variable advice.detachedHead to false\n\nHEAD is now at b562f0b create flag\n ~/p/g/drop-in \ue0b0 \u27a6 b562f0b \ue0b0 ls                         Sun Mar 24 02:05:06 2024\nmessage.txt\n ~/p/g/drop-in \ue0b0 \u27a6 b562f0b \ue0b0 cat message.txt            Sun Mar 24 02:05:16 2024\npicoCTF{s@n1t1z3_c785c319}\n ~/p/g/drop-in \ue0b0 \u27a6 b562f0b \ue0b0  \n</code></pre> <p>ime Machine  |  | 50 points Tags:  AUTHOR: JEFFERY JOHN</p> <p>Description What was I last working on? I remember writing a note to help me remember... You can download the challenge files here: challenge.zip</p> <p>https://artifacts.picoctf.net/c_titan/162/challenge.zip</p> <p>git log                      Sun Mar 24 02:10:51 2024 commit 712314f105348e295f8cadd7d7dc4e9fa871e9a2 (HEAD -&gt; master) Author: picoCTF ops@picoctf.com Date:   Tue Mar 12 00:07:26 2024 +0000</p> <pre><code>picoCTF{t1m3m@ch1n3_e8c98b3a}\n</code></pre> <p>Blame Game  |  | 75 points Tags:  AUTHOR: JEFFERY JOHN</p> <p>Description Someone's commits seems to be preventing the program from working. Who is it? You can download the challenge files here: challenge.zip</p> <p>git blame message.py                                                                                                                          Sun Mar 24 02:25:28 2024 8c83358c (picoCTF{@sk_th3_1nt3rn_2c6bf174} 2024-03-12 00:07:11 +0000 1) print(\"Hello, World!\"</p> <p>Collaborative Development  |  | 75 points Tags:  AUTHOR: JEFFERY JOHN</p> <p>Description My team has been working very hard on new features for our flag printing program! I wonder how they'll work together? You can download the challenge files here: challenge.zip</p> <pre><code> ~/p/g/c/d/.git \ue0b0 ls                                                                                                                                                                                                 Sun Mar 24 02:29:48 2024\nCOMMIT_EDITMSG  HEAD  branches/  config  description  hooks/  index  info/  logs/  objects/  refs/\n ~/p/g/c/d/.git \ue0b0 cd ..                                                                                                                                                                                              Sun Mar 24 02:29:49 2024\n ~/p/g/c/drop-in \ue0b0 \u27a6 2258a0f \ue0b0 ls                                                                                                                                                                                    Sun Mar 24 02:29:55 2024\nflag.py\n ~/p/g/c/drop-in \ue0b0 \u27a6 2258a0f \ue0b0 cat flag.py                                                                                                                                                                           Sun Mar 24 02:29:56 2024\nprint(\"Printing the flag...\")\n ~/p/g/c/drop-in \ue0b0 \u27a6 2258a0f \ue0b0 git log                                                                                                                                                                               Sun Mar 24 02:29:58 2024\ncommit 2258a0f267d57e8b6025e2a020b77fac7a553c92 (HEAD, main)\nAuthor: picoCTF &lt;ops@picoctf.com&gt;\nDate:   Tue Mar 12 00:07:54 2024 +0000\n\n    init flag printer\n ~/p/g/c/drop-in \ue0b0 \u27a6 2258a0f \ue0b0 git blame flag.py                                                                                                                                                                     Sun Mar 24 02:30:06 2024\n^2258a0f (picoCTF 2024-03-12 00:07:54 +0000 1) print(\"Printing the flag...\")\n ~/p/g/c/drop-in \ue0b0 \u27a6 2258a0f \ue0b0 git branch -a                                                                                                                                                                         Sun Mar 24 02:30:14 2024\n* (HEAD detached at 2258a0f)\n  feature/part-1\n  feature/part-2\n  feature/part-3\n  main\n ~/p/g/c/drop-in \ue0b0 \u27a6 2258a0f \ue0b0 git checkout main                                                                                                                                                                     Sun Mar 24 02:30:53 2024\nSwitched to branch 'main'\n ~/p/g/c/drop-in \ue0b0 \ue0a0 \ue0b0 ls                                                                                                                                                                                            Sun Mar 24 02:31:07 2024\nflag.py\n ~/p/g/c/drop-in \ue0b0 \ue0a0 \ue0b0 cat flag.py                                                                                                                                                                                   Sun Mar 24 02:31:08 2024\nprint(\"Printing the flag...\")\n ~/p/g/c/drop-in \ue0b0 \ue0a0 \ue0b0 git blame flag.py                                                                                                                                                                             Sun Mar 24 02:31:10 2024\n^2258a0f (picoCTF 2024-03-12 00:07:54 +0000 1) print(\"Printing the flag...\")\n ~/p/g/c/drop-in \ue0b0 \ue0a0 \ue0b0 git log                                                                                                                                                                                       Sun Mar 24 02:31:15 2024\ncommit 2258a0f267d57e8b6025e2a020b77fac7a553c92 (HEAD -&gt; main)\nAuthor: picoCTF &lt;ops@picoctf.com&gt;\nDate:   Tue Mar 12 00:07:54 2024 +0000\n\n    init flag printer\n ~/p/g/c/drop-in \ue0b0 \ue0a0 \ue0b0 git checkout feature/part-1                                                                                                                                                                   Sun Mar 24 02:31:18 2024\nSwitched to branch 'feature/part-1'\n ~/p/g/c/drop-in \ue0b0 \ue0a0 feature/part-1 \ue0b0 ls                                                                                                                                                                             Sun Mar 24 02:31:37 2024\nflag.py\n ~/p/g/c/drop-in \ue0b0 \ue0a0 feature/part-1 \ue0b0 cat flag.py                                                                                                                                                                    Sun Mar 24 02:31:38 2024\nprint(\"Printing the flag...\")\nprint(\"picoCTF{t3@mw0rk_\", end='')\u23ce                                                                                                                                                                                                           ~/p/g/c/drop-in \ue0b0 \ue0a0 feature/part-1 \ue0b0 git checkout feature/part-2                                                                                                                                                    Sun Mar 24 02:31:40 2024\nSwitched to branch 'feature/part-2'\n ~/p/g/c/drop-in \ue0b0 \ue0a0 feature/part-2 \ue0b0 cat flag.py                                                                                                                                                                    Sun Mar 24 02:31:55 2024\nprint(\"Printing the flag...\")\n\nprint(\"m@k3s_th3_dr3@m_\", end='')\u23ce                                                                                                                                                                                                            ~/p/g/c/drop-in \ue0b0 \ue0a0 feature/part-2 \ue0b0 git checkout feature/part-3                                                                                                                                                    Sun Mar 24 02:31:57 2024\nSwitched to branch 'feature/part-3'\n ~/p/g/c/drop-in \ue0b0 \ue0a0 feature/part-3 \ue0b0 cat flag.py                                                                                                                                                                    Sun Mar 24 02:32:02 2024\nprint(\"Printing the flag...\")\n\nprint(\"w0rk_6c06cec1}\")\n ~/p/g/c/drop-in \ue0b0 \ue0a0 feature/part-3 \ue0b0   \n</code></pre> <p>picoCTF{t3@mw0rk_m@k3s_th3_dr3@m_w0rk_6c06cec1}</p> <p>binhexa  |  | 100 points Tags:  AUTHOR: NANA AMA ATOMBO-SACKEY</p> <p>Description How well can you perfom basic binary operations? Start searching for the flag here nc titan.picoctf.net 49964</p> <p>picoCTF{b1tw^3se_0p3eR@tI0n_su33essFuL_d6f8047e}</p> <p>! \ue0b0 ~/p/general_skills \ue0b0 nc titan.picoctf.net 49964                                                                                                                                                         27.7s \ue0b3 Sun Mar 24 02:42:02 2024</p> <p>Welcome to the Binary Challenge!\" Your task is to perform the unique operations in the given order and find the final result in hexadecimal that yields the flag.</p> <p>Binary Number 1: 10001011 Binary Number 2: 11111000</p> <p>Question 1/6: Operation 1: '|' Perform the operation on Binary Number 1&amp;2. Enter the binary result: 11111011 Correct!</p> <p>Question 2/6: Operation 2: '*' Perform the operation on Binary Number 1&amp;2. Enter the binary result: 10001000 Incorrect. Try again Enter the binary result: 11101110000 Incorrect. Try again Enter the binary result: 11101110000'</p> <p>Incorrect input. Provide the right input Enter the binary result: 11101110000 Incorrect. Try again Enter the binary result: 01000011010101000 Correct!</p> <p>Question 3/6: Operation 3: '&lt;&lt;' Perform a left shift of Binary Number 1 by 1 bits. Enter the binary result: 000100010110 Correct!</p> <p>Question 4/6: Operation 4: '+' Perform the operation on Binary Number 1&amp;2. Enter the binary result: 0110000011 Correct!</p> <p>Question 5/6: Operation 5: '&amp;' Perform the operation on Binary Number 1&amp;2. Enter the binary result:  10001000 Correct!</p> <p>Question 6/6: Operation 6: '&gt;&gt;' Perform a right shift of Binary Number 2 by 1 bits . Enter the binary result: 01111100 Correct!</p> <p>Enter the results of the last operation in hexadecimal: 30 31 31 31 31 31 30 30</p> <p>Incorrect input. Provide the right input!</p> <p>Enter the results of the last operation in hexadecimal: 303131313131313030 Incorrect answer!</p> <p>Enter the results of the last operation in hexadecimal: 7C</p> <p>Correct answer! The flag is: picoCTF{b1tw^3se_0p3eR@tI0n_su33essFuL_d6f8047e}</p> <p>Scan Surprise  |  |  | 50 points Tags:  AUTHOR: JEFFERY JOHN</p> <p>Description I've gotten bored of handing out flags as text. Wouldn't it be cool if they were an image instead? You can download the challenge files here: challenge.zip Additional details will be available after launching your challenge instance.</p> <p>https://artifacts.picoctf.net/c_atlas/2/challenge.zip</p> <p>picoCTF{p33k_@_b00_b5ce2572}</p> <p>scan the qr and get the flag</p> <p>Verify  |  |  | 50 points Tags:  AUTHOR: JEFFERY JOHN</p> <p>Description People keep trying to trick my players with imitation flags. I want to make sure they get the real thing! I'm going to provide the SHA-256 hash and a decrypt script to help you know that my flags are legitimate. You can download the challenge files here: challenge.zip Additional details will be available after launching your challenge instance.</p> <p>https://artifacts.picoctf.net/c_rhea/11/challenge.zip</p> <p>./d.sh files/ | grep -v \"This flag is fake! Keep looking!\" </p> <p>picoCTF{trust_but_verify_8eee7195}</p> <p>modified script </p> <pre><code>#!/bin/bash\n\n# Function to decrypt a file\ndecrypt_file() {\n    local file=\"$1\"\n    if openssl enc -d -aes-256-cbc -pbkdf2 -iter 100000 -salt -in \"$file\" -k picoCTF; then\n        echo \"Decrypted contents of '$file':\"\n    else\n        echo \"Error: Failed to decrypt '$file'. This flag is fake! Keep looking!\"\n    fi\n}\n\n# Recursive function to decrypt all files in a directory\ndecrypt_files_recursive() {\n    local directory=\"$1\"\n    for file in \"$directory\"/*; do\n        if [ -f \"$file\" ]; then\n            decrypt_file \"$file\"\n        elif [ -d \"$file\" ]; then\n            decrypt_files_recursive \"$file\"\n        fi\n    done\n}\n\n# Check if the user provided a directory name as an argument\nif [ $# -eq 0 ]; then\n    echo \"Expected usage: decrypt.sh &lt;directory&gt;\"\n    exit 1\nfi\n\n# Store the provided directory name in a variable\ndirectory=\"$1\"\n\n# Check if the provided argument is a directory\nif [ ! -d \"$directory\" ]; then\n    echo \"Error: '$directory' is not a valid directory.\"\n    exit 1\nfi\n\n# Decrypt files in the specified directory\ndecrypt_files_recursive \"$directory\"\n</code></pre> <p>CanYouSee  |  |  | 100 points Tags:  AUTHOR: MUBARAK MIKAIL</p> <p>Description How about some hide and seek? Download this file here.</p> <p>https://artifacts.picoctf.net/c_titan/5/unknown.zip</p> <p>download the zip file</p> <p>unzip it there is a png image</p> <p>use exiftool see the meta data you find a base 64 decode it get the flag</p> <pre><code> ~/p/f/can_you_see \ue0b0 exiftool ukn_reality.jpg                                                                                                       Mon Mar 25 01:25:43 2024\nExifTool Version Number         : 12.67\nFile Name                       : ukn_reality.jpg\nDirectory                       : .\nFile Size                       : 2.3 MB\nFile Modification Date/Time     : 2024:02:16 04:10:17+05:30\nFile Access Date/Time           : 2024:02:16 04:10:17+05:30\nFile Inode Change Date/Time     : 2024:03:25 01:25:41+05:30\nFile Permissions                : -rw-r--r--\nFile Type                       : JPEG\nFile Type Extension             : jpg\nMIME Type                       : image/jpeg\nJFIF Version                    : 1.01\nResolution Unit                 : inches\nX Resolution                    : 72\nY Resolution                    : 72\nXMP Toolkit                     : Image::ExifTool 11.88\nAttribution URL                 : cGljb0NURntNRTc0RDQ3QV9ISUREM05fNGRhYmRkY2J9Cg==\nImage Width                     : 4308\nImage Height                    : 2875\nEncoding Process                : Baseline DCT, Huffman coding\nBits Per Sample                 : 8\nColor Components                : 3\nY Cb Cr Sub Sampling            : YCbCr4:2:0 (2 2)\nImage Size                      : 4308x2875\nMegapixels                      : 12.4\n ~/p/f/can_you_see \ue0b0                                                                                                                        255ms \ue0b3 Mon Mar 25 01:26:01 2024\n ~/p/f/can_you_see \ue0b0                                                                                                                        255ms \ue0b3 Mon Mar 25 01:26:11 2024\n ~/p/f/can_you_see \ue0b0 base64 -d cGljb0NURntNRTc0RDQ3QV9ISUREM05fNGRhYmRkY2J9Cg==                                                             255ms \ue0b3 Mon Mar 25 01:26:11 2024\nbase64: 'cGljb0NURntNRTc0RDQ3QV9ISUREM05fNGRhYmRkY2J9Cg==': No such file or directory\n ! \ue0b0 ~/p/f/can_you_see \ue0b0 echo \"cGljb0NURntNRTc0RDQ3QV9ISUREM05fNGRhYmRkY2J9Cg==\" &gt; b64                                                              Mon Mar 25 01:26:19 2024\n ~/p/f/can_you_see \ue0b0 base64 -d b64                                                                                                                  Mon Mar 25 01:27:17 2024\npicoCTF{ME74D47A_HIDD3N_4dabddcb}\n</code></pre> <p>picoCTF{ME74D47A_HIDD3N_4dabddcb}</p> <p>Secret of the Polyglot  |  |  | 100 points Tags:  AUTHOR: SYREAL</p> <p>Description The Network Operations Center (NOC) of your local institution picked up a suspicious file, they're getting conflicting information on what type of file it is. They've brought you in as an external expert to examine the file. Can you extract all the information from this strange file? Download the suspicious file here.</p> <p>https://artifacts.picoctf.net/c_titan/8/flag2of2-final.pdf</p> <p>part 1 1n_pn9_&amp;_pdf_1f991f77}</p> <p>part2 picoCTF{f1u3n7_}</p> <p>picoCTF{f1u3n7_1n_pn9_&amp;_pdf_1f991f77}</p> <p>flag is dead bcz of previous old file again solving by changeoin the extention to png</p> <p>interencdec  |  |  | 50 points Tags:  AUTHOR: NGIRIMANA SCHADRACK</p> <p>Description Can you get the real meaning from this file. Download the file here.</p> <p>https://artifacts.picoctf.net/c_titan/2/enc_flag</p> <p>picoCTF{caesar_d3cr9pt3d_78250afc}</p> <p>twice base 64 and the rot19 or caesar ciper you can say</p> <p>picoCTF{f1u3n7_1n_pn9_&amp;_pdf_249d05c0}</p> <p>Binary Search  |  |  | 100 points Tags:  AUTHOR: JEFFERY JOHN</p> <p>Description Want to play a game? As you use more of the shell, you might be interested in how they work! Binary search is a classic algorithm used to quickly find an item in a sorted list. Can you find the flag? You'll have 1000 possibilities and only 10 guesses. Cyber security often has a huge amount of data to look through - from logs, vulnerability reports, and forensics. Practicing the fundamentals manually might help you in the future when you have to write your own tools! You can download the challenge files here: challenge.zip ssh -p 63335 ctf-player@atlas.picoctf.net Using the password 1ad5be0d. Accept the fingerprint with yes, and ls once connected to begin. Remember, in a shell, passwords are hidden!</p> <p>picoCTF{g00d_gu355_3af33d18}</p> <pre><code> ! \ue0b0 ~/p/g/h/c/drop-in \ue0b0 ssh -p 63335 ctf-player@atlas.picoctf.net                                             Mon Mar 25 12:46:48 2024\nThe authenticity of host '[atlas.picoctf.net]:63335 ([18.217.83.136]:63335)' can't be established.\nED25519 key fingerprint is SHA256:M8hXanE8l/Yzfs8iuxNsuFL4vCzCKEIlM/3hpO13tfQ.\nThis key is not known by any other names.\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nWarning: Permanently added '[atlas.picoctf.net]:63335' (ED25519) to the list of known hosts.\nctf-player@atlas.picoctf.net's password: \nWelcome to the Binary Search Game!\nI'm thinking of a number between 1 and 1000.\nEnter your guess: 500\nHigher! Try again.\nEnter your guess: 600\nLower! Try again.\nEnter your guess: 550\nHigher! Try again.\nEnter your guess: 560\nHigher! Try again.\nEnter your guess: 570\nHigher! Try again.\nEnter your guess: 580\nLower! Try again.\nEnter your guess: 575\nLower! Try again.\nEnter your guess: 574\nLower! Try again.\nEnter your guess: 573\nLower! Try again.\nEnter your guess: 572\nCongratulations! You guessed the correct number: 572\nHere's your flag: picoCTF{g00d_gu355_3af33d18}\nConnection to atlas.picoctf.net closed.\n</code></pre> <p>endianness  |  |  | 200 points Tags:  AUTHOR: NANA AMA ATOMBO-SACKEY</p> <p>Description Know of little and big endian? nc titan.picoctf.net 65485. Source</p> <pre><code>Welcome to the Endian CTF!\nYou need to find both the little endian and big endian representations of a word.\nIf you get both correct, you will receive the flag.\nWord: trvcs\nEnter the Little Endian representation: 73 63 76 72 74\nIncorrect Little Endian representation. Try again!\nEnter the Little Endian representation: Incorrect Little Endian representation. Try again!\nEnter the Little Endian representation: Incorrect Little Endian representation. Try again!\nEnter the Little Endian representation: Incorrect Little Endian representation. Try again!\nEnter the Little Endian representation: Incorrect Little Endian representation. Try again!\nEnter the Little Endian representation: 7363767274\nCorrect Little Endian representation!\nEnter the Big Endian representation: 7472766373\nCorrect Big Endian representation!\nCongratulations! You found both endian representations correctly!\nYour Flag is: picoCTF{3ndi4n_sw4p_su33ess_817b7cfe}\n</code></pre> <p>understand and input the number using googling </p> <p>dont-you-love-banners  |  |  | 300 points Tags:  AUTHOR: LOIC SHEMA / SYREAL</p> <p>Description Can you abuse the banner? Additional details will be available after launching your challenge instance.</p> <p>dont-you-love-banners  |  |  | 300 points Tags:  AUTHOR: LOIC SHEMA / SYREAL</p> <p>Description Can you abuse the banner? The server has been leaking some crucial information on tethys.picoctf.net 51918. Use the leaked information to get to the server. To connect to the running application use nc tethys.picoctf.net 53635. From the above information abuse the machine and find the flag in the /root directory.</p> <p>SSH-2.0-OpenSSH_7.6p1 My_Passw@rd_@1234</p>"}]}